import os
import argparse
import pandas as pd
from tqdm.auto import tqdm
from jinja2 import Environment, FileSystemLoader
from lib.paths import all_paths
from vms.eval.agents.vulnerability_hypothesis_validation.agent_eval_context import ProofOfConceptExecutionAgentEvalContext

from dataclasses import asdict

def main(
    bundle_name,
    out_path,
    include_how_to_exploit=False,
    include_repository_context=False,
):
    ctx = ProofOfConceptExecutionAgentEvalContext()
    dataset = ctx.load_dataset()
    # Load prompt template
    prompt_dir = all_paths.get_prompt_path()
    env = Environment(loader=FileSystemLoader(str(prompt_dir)))
    prompt_template = env.get_template("vulnerability_discovery/proof_of_concept_execution_positive_only.txt")

    rows = []
    ids_in_bundle = set(ctx.load_bundle(bundle_name).ids)
    for id, example in tqdm(dataset.root.items()):
        if id not in ids_in_bundle:
            continue
        # Optionally include how_to_exploit
        hypothesis_fields_to_exclude = [
            "exploitability_conditions",
        ]
        if not include_how_to_exploit:
            hypothesis_fields_to_exclude.append("how_to_exploit")
        vuln_hyp_json = example.vulnerability_hypothesis.model_dump_json(exclude=hypothesis_fields_to_exclude, indent=2)
        if include_repository_context and example.repository_context is not None:
            repository_context = example.repository_context.model_dump_json(indent=2)
        else:
            repository_context = None
        context = {
            # NOTE: workdir is not used in the prompt
            "vulnerability_hypothesis": vuln_hyp_json,
            "repository_context": repository_context,
            "use_text_action_tool": True,
        }
        prompt_text = prompt_template.render(**context)
        prompt_messages = [{"role": "user", "content": prompt_text}]
        extra_info = {
            # NOTE: this is how we construct context-specific envirionments - the shell tool uses this to clone the repo
            "repository_reference": asdict(example.repository_reference),
        }
        row = {
            "prompt": prompt_messages,
            "extra_info": extra_info,
            # Optional fields
            "data_source": bundle_name,
        }
        rows.append(row)
    df = pd.DataFrame(rows)
    out_path = os.path.expanduser(out_path)
    os.makedirs(os.path.dirname(out_path), exist_ok=True)
    df.to_parquet(out_path)
    print(f"Wrote {len(df)} examples to {out_path}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--bundle_name", type=str)
    parser.add_argument("--out_path", type=str)
    parser.add_argument("--include_how_to_exploit", action="store_true")
    parser.add_argument("--include_repository_context", action="store_true")
    args = parser.parse_args()
    main(
        bundle_name=args.bundle_name,
        out_path=args.out_path,
        include_how_to_exploit=args.include_how_to_exploit,
        include_repository_context=args.include_repository_context,
    )
